###################################################################################################
##   _______   _                      __     __             _    
##  / ___/ /  (_)__  __ _  __ _____  / /__  / /  ___  ___ _(_)___ TM
## / /__/ _ \/ / _ \/  ' \/ // / _ \/  '_/ / /__/ _ \/ _ `/ / __/     //  O P E N - S O U R C E //
## \___/_//_/_/ .__/_/_/_/\_,_/_//_/_/\_\ /____/\___/\_, /_/\__/ 
##           /_/                                    /___/              
###################################################################################################
+-------------------------------------------------------------------------------------------------+
| Pequeno RISC-V CPU v1.0 (PQR5 v1.0) - Directory Structure                                       |
+-------------------------------------------------------------------------------------------------+
|
++ assembler :
|  >> Contains assembler related files
|     |
|     ++ example_programs : [DIRECTORY] contains example ASM programs ready to compile and test
|     +- pqr5asm.py       : pqr5asm Assembler for Pequeno
|     +- sample.*         : Bin/Hex/Assembly files generated by Makefile build
|     ++ asm_pgm_dump_ref : [DIRECTORY] contains dump files of ASM program runs, used as golden ref 
|                           to verify simulation results
|
++ doc : 
|  >> Contains all docs
|     |
|     +- pequeno_riscv_v1_0_ug.pdf             : PQR5 v1.0 User Guide (Yet to be released)
|     +- pqr5asm_imanual.pdf                   : pqr5asm Assembler Instruction Manual
|     +- Programming_Pequeno_with_peqFlash.pdf : peqFlash User Guide to program PQR5
|
++ dump : [RUN-TIME GENERATED DIRECTORY]
|  >> Contains all simulation dumps
|     |
|     +- *_dump.txt       : IMEM/DMEM/Regfile dump
|     +- sim.vcd          : VCD dump of Subsystem
|     ++ regress_run_dump : [DIRECTORY] contains regression results
|
++ filelist : 
|  >> Contains complete RTL source files list
|     |
|     +- all_design_src_files.txt
|
++ peqFlash : 
|  >> Contains flasher tool for PQR5 subsystem, peqFlash
|     |
|     +- peqflash.py : Flasher
|
++ scripts :
|  >> Contains scripts used by Makefile/Simulator
|     |
|     ++ synth_setup    : [DIRECTORY] contains Xilinx Vivado synthesis & implementation related scripts
|     +- pqr5genram.py  : Generates I-RAM and D-RAM initialized with binary code
|     +- pqr5genwrap.py : Generates wrapper for generated I-RAM and D-RAM
|     +- opserial.py    : Script to open the serial port at which PQR5 subsystem's debug UART is connected
|     +- opserial.sh    : Script to run opserial.py
|     +- regress_run.sh : Runs regression tests on PQR5 and dumps results
|     +- run.do         : Makefile initiated simulation in Linux supports sourcing this file on VSIM
|
++ sim : [RUN-TIME GENERATED DIRECTORY]
|  >> Contains all simulation related files, logs, libs...
|
++ synth : [SYNTH-TIME GENERATED DIRECTORY]
|  >> Contains the synthesis and implementation setup.
|     |
|     ++ rtl_src             : [DIRECTORY] all RTL source files
|     +- run_synth.tcl       : TCL file used by Makefile to run synthesis + implementation + bitfile generation in Vivado shell
|     +- write_bitstream.tcl : TCL file used by Makefile to burn the bitfile to FPGA using Vivado HW manager
|     ++ synth_output        : [SYNTH GENERATED DIRECTORY] contains all synthesis & implementation reports and logs
|     ++ bitfile_output      : [SYNTH GENERATED DIRECTORY] contains the generated bitfile
|
++ src :
|  >> Contains all RTL source files of PQR5 Core and Subsystem
|     |
|     ++ common :
|     |  >> All packages/modules used across different blocks
|     |     |
|     |     +- areset_sync.sv        : Async Reset Synchronizer
|     |     +- cdc_sync.sv           : CDC Synchronizer
|     |     +- pqr5_core_pkg.sv      : PQR5 Core package
|     |     +- pqr5_subsystem_pkg.sv : PQR5 Subsystem package 
|     |     ++ uart_ip               : [DIRECTORY] UART Controller v1.2 IP source files
|     |
|     ++ core : 
|     |  >> All source files of PQR5 Core
|     |     |
|     |     +- alu.sv                : ALU
|     |     +- decode_unit.sv        : Decode Unit (DU)
|     |     +- execution_unit.sv     : Execution Unit (EXU)
|     |     +- exu_branch_unit.sv    : EXU Branch Unit (EXU-BU)
|     |     +- fetch_unit.sv         : Fetch Unit (FU)
|     |     +- loadstore_unit.sv     : Load-Store Unit (LSU)
|     |     +- memory_access_unit.sv : Memory Access Unit (MACCU)
|     |     +- opfwd_control.sv      : Operand Forward Control
|     |     +- pqr5_core_top.sv      : PQR5 Core Top         // TOP FILE //
|     |     +- regfile.sv            : Register File
|     |     +- writeback_unit.sv     : Writeback Unit (WBU)
|     |
|     ++ include : 
|     |  >> All header files used across different blocks
|     |     |
|     |     +- pqr5_core_macros.svh      : PQR5 Core header file
|     |     +- pqr5_subsystem_macros.svh : PQR5 Subsystem header file
|     |
|     ++ memory : 
|     |  >> Synthesisable memory models used by Subsystem, generated by Makefile 
|     |     |
|     |     ++ model        : [DIRECTORY] contains synthesisable memory models for I/D-RAM & wrapper
|     |     +- *.sv         : [MAKEFILE GENERATED] I/D-RAM source files with bootable binary code
|     |
|     ++ subsystem : 
|        >> All source files of PQR5 Subsystem
|           |
|           +- pqr5_subsystem_top.sv : PQR5 Subsystem Top        // TOP FILE //
|           +- reset_ctl.sv          : Reset Controller for PQR5 Subsystem
|           ++ loader                : [DIRECTORY] contains Loader of PQR5 Subsystem
|           ++ dbgUART               : [DIRECTORY] contains Debug UART's address map
|
+- LICENSE.md :
|  >> Licensing notes for the usage of PQR5
|
+- release_notes : 
|  >> The IP release notes
|
+- Makefile :
|  >> This is the makefile used to build, compile, and simulate PQR5 Core/Subsystem with firmware
|     Makefile is compatible with Windows/Linux with latest Questa/ModelSim simulators
|
+-------------------------------------------------------------------------------------------------+

+-------------------------------------------------------------------------------------------------+
|  BUILD, COMPILE, SIMULATE, SYNTHESIS NOTES                                   chipmunklogic.com  |
+-------------------------------------------------------------------------------------------------+
|
|   REQUIREMENTS OF MAKEFILE BASED TOOL FLOW
|   ========================================
|   1) Windows OS with bash shell emulator like MSYS/GitBash, or Linux OS
|   2) GNU Make utility
|   3) TCL support
|   4) Python 3.9 support
|   4) Compilation & Simulation flow is compatible with latest ModelSim/QuestaSim
|   5) Synthesis, Implementation, & Bitfile generation flow is compatible with Xilinx Vivado
|
|   STEPS
|   =====
|   1) Compile any ASM program in assembler/example_programs with Makefile:
|      >> make asm2bin ASM=01_test_regfile.s
|
|      This will generate binary code: sample_imem/dmem.bin(or hex) in assembler/
|
|   2) Generate I-RAM and D-RAM which initializes on power-on (on FPGAs) with binary code from (1):
|      >> make genram DPT=256 OFT=0
|   
|      This will generate a synthesisable I-RAM & D-RAM model of 256x32 bit, with first instr 
|      copied at address: 0x0000_0000 ... All memory files are generated in src/memory
|
|      NOTE: In case Assembler generated a non-relocatable binary code:
|            -- OFT parameter in Makefile should be same as .org address in the text section of ASM program.
|            -- PC_INIT parameter of PQR5 Core should also be the same address to boot the Subsystem 
|               correctly with firmware.
|            In case Assembler generated a relocatable binary code:
|            -- OFT parameter in Makefile may not necessarily be the same as .org address.
|            -- OFT parameter and PC_INIT should be the same.
|            By default, Makefile generates relocatable binary code with Assembler for all ASM programs.
|
|   3) Configure PQR5 Core and Subsystem configurable macros in src/include/ for RTL elaboration
|   
|   4) Compile PQR5 Core and Subsystem with memory models
|      >> make compile
|
|   5) The processes in (1, 2, 4) can also be combined by running build:
|      >> make build ASM=01_test_regfile.s DPT=256 OFT=0
|
|   6) Configure scripts/run.do if reqd for simulation specific commands
|
|   7) Run PQR5 Subsystem simulation with firmware:
|      >> make sim
|
|      Find all dumps in dump/
|      Find all logs in sim/
|
|   8) To configure the IP for synthesis, SYNTH macros should be set in header files before
|      compilation and synthesis.
|
|   9) Steps for synthesis in Vivado for Xilinx FPGAs
|      a) Build the synth setup in Vivado by running: make build_synth
|      b) Make target-specific changes to the RTL source files in synth/rtl_src if required
|         This includes setting SYNTH MACROs, test env & design MACROs, configure I/O ports etc
|      c) Create a top-level XDC constraints file for the design in synth/
|      d) Configure the TCL scripts in synth/
|      e) Run synthesis by running: make_synth
|      f) Verify all outputs, reports & logs in synth/*_outputs, check errors/warnings, if any
|      g) Burn the bitfile to the target FPGA by running: make burn
|
|  10) Steps to flash the program binary to target
|      a) Make sure PQR5 subsystem is synthesised and implemented with Loader
|      b) Generate the bitstream and send to the target
|      c) Invoke peqFlash to flash the program binary by running: make flash
|
|  11) To run regression: make regress
|      This will run all example programs and dump the regression results in dump/regress_run_dump
|      Regressions are run with OFT=0, DEPTH=256 by default, so PC_INIT of the CPU should be 0
|
|   NOTE: run "make help" to understand the complete list of Makefile recipes 
|
+-------------------------------------------------------------------------------------------------+
|  C H I P M U N K   L O G I C  ™                                              chipmunklogic.com  |
+-------------------------------------------------------------------------------------------------+
