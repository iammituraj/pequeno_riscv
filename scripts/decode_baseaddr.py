#############################################################################################################
##   _______   _                      __     __             _    
##  / ___/ /  (_)__  __ _  __ _____  / /__  / /  ___  ___ _(_)___ TM
## / /__/ _ \/ / _ \/  ' \/ // / _ \/  '_/ / /__/ _ \/ _ `/ / __/          ////  O P E N - S O U R C E ////
## \___/_//_/_/ .__/_/_/_/\_,_/_//_/_/\_\ /____/\___/\_, /_/\__/ 
##           /_/                                    /___/              
#############################################################################################################
# Script           : Decode base address
# Developer        : Mitu Raj, chip@chipmunklogic.com
# Vendor           : Chipmunk Logicâ„¢, https://chipmunklogic.com
#
# Description      : This script parses the binary file generated by pqr5asm & decodes the base address.
#
# Last modified on : Aug-2024
# Compatiblility   : Python 3.9 tested
#
# Copyright        : Open-source license, see developer.txt.
#############################################################################################################

# Import Libraries
import sys


# Function to find base address from the input binary file
def read_baseaddr(filename):
    word_size = 4  
    word_index = 2  # Index of the third word = Base address MSB
    try:
        with open(filename, 'rb') as file:
            # Read and skip the first two words
            file.seek(word_size * word_index)
            # Read the third word
            addr_bytes = file.read(word_size)                      

            # Convert bytes to integer (big-endian)
            addr = int.from_bytes(addr_bytes, byteorder='big')            
            return addr
    except:
        print("| ERROR: Failed to open the the binary file: ", filename)
        exit(1)
    

# Function to write base address to output file
def write_baseaddr(addr, filename):
    try:
        with open(filename, 'w') as file:        
            file.write(f"0x{addr:08X}\n")
    except:
        print("| ERROR: Failed to create the temporary output file: ", filename)
        exit(1) 


## MAIN ##
input_filename = sys.argv[1]
output_filename = sys.argv[2]

baseaddr = read_baseaddr(input_filename)
write_baseaddr(baseaddr, output_filename)        

        
